---
- name: create workdir
  command: mktemp -d /tmp/degoss.XXXXXXXXXX
  register: workdir
  changed_when: degoss_changed_when

# set play facts
- name: establish facts
  set_fact:
    degoss_tmp_root: "{{ workdir.stdout.strip() }}"
    degoss_test_root: "{{ workdir.stdout.strip() }}/tests"
    degoss_goss_install_dir: "{{ workdir.stdout.strip() }}/bin"
    degoss_goss_bin: "{{ workdir.stdout.strip() }}/bin/goss"

# switch to pinned vs latest
- include_tasks: versions/latest.yml
  when: goss_version == "latest"

- include_tasks: versions/pinned.yml
  when: goss_version != "latest"

# create goss directories
- name: create goss directories
  file: path={{ item }} state=directory
  with_items:
    - "{{ degoss_tmp_root }}"
    - "{{ degoss_test_root }}"
    - "{{ degoss_goss_install_dir }}"
  changed_when: degoss_changed_when

# download goss
- name: install
  get_url:
    url: "{{ goss_download_url }}"
    dest: "{{ degoss_goss_bin }}-{{ item }}"
    mode: 0755
  with_items:
    - "{{ goss_real_version }}"
  changed_when: degoss_changed_when
  when: goss_binary is not defined

# deploy goss binary
- name: deploy goss binary
  copy: src={{ goss_binary }} dest={{ degoss_goss_bin }}-{{ goss_real_version}}  mode=0755
  changed_when: degoss_changed_when
  when: goss_binary is defined

# symlink
- name: link
  file:
    state: link
    src: "{{ degoss_goss_bin }}-{{ goss_real_version }}"
    dest: "{{ degoss_goss_bin }}"
    force: true
  changed_when: degoss_changed_when

# deploy test files including the main and additional test files
- name: deploy test files
  copy: src={{ item }} dest={{ degoss_test_root }} mode=0644 directory_mode=0755 setype=user_tmp_t
  with_items: "{{ [goss_file] + goss_addtl_files + goss_addtl_dirs }}"
  changed_when: degoss_changed_when

# deploy vars file
- name: deploy vars file
  copy: src={{ goss_vars_file }} dest={{ degoss_test_root }} mode=0644 directory_mode=0755 setype=user_tmp_t
  changed_when: degoss_changed_when
  when: goss_vars_file != "None"

# run the tests
- name: run tests
  goss:
    goss_path: "{{ degoss_goss_bin }}"
    path: "{{ '%s/%s' | format(degoss_test_root, goss_file | regex_replace('.*/', '')) }}"
    vars: "{{ '%s/%s' | format(degoss_test_root, goss_vars_file | regex_replace('.*/', '')) if goss_vars_file != 'None' else omit }}"
    format: "{{ goss_output_format }}"
  failed_when: false
  register: goss_output
  tags: [format_goss_output]

# clean everything up
- name: clean
  file: path={{ degoss_tmp_root }} state=absent
  when: degoss_clean | bool
  changed_when: degoss_changed_when

# our output callback plugin will catch the tag of this and format output accordingly
- name: report errors
  fail: msg={{ goss_output.get('msg') }}
  when: goss_output.get('goss_failed') | bool
  tags: [format_goss_output]

- name: report module errors
  fail: msg="Goss Module Run Failed."
  when: goss_output.get('msg')|lower == "module failure"
  tags: [format_goss_stacktrace]
